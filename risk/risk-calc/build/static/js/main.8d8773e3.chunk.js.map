{"version":3,"sources":["index.js"],"names":["require","Win","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","winner","remaining","Info","attack","defense","Reset","onClick","FormComponent","_this","Object","_home_nafal_Documents_Dev_aminsennour_com_risk_risk_calc_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_nafal_Documents_Dev_aminsennour_com_risk_risk_calc_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_nafal_Documents_Dev_aminsennour_com_risk_risk_calc_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","Attack","AttackRoll","Defense","DefenseRoll","roundWinner","canChange","win","handleChangeAttack","bind","_home_nafal_Documents_Dev_aminsennour_com_risk_risk_calc_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","handleChangeDefense","handleSubmit","event","target","value","setState","parseInt","armiesAttack","armiesDefend","attackRoll","x","combat","attackDice","defendRoll","dice","Math","round","random","defDice","console","log","battle","logic","preventDefault","_this2","onSubmit","type","onChange","renderInfo","renderWin","handleReset","React","Component","ret","hold","i","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8d8773e3.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nvar seedrandom = require(\"seedrandom\");\n\nfunction Win(props) {\n  return (\n    <div className=\"win-message card\">\n      {props.winner} won with {props.remaining} armies left.\n    </div>\n  );\n}\n\nfunction Info(props) {\n  return (\n    <div className=\"card\">\n      Attack rolled : {props.attack}\n      {\" | \"}\n      Defense rolled : {props.defense}\n      {\"\\n\"}\n      {props.winner} won this round.\n    </div>\n  );\n}\n\nfunction Reset(props) {\n  return (\n    <div className=\"reset card\" onClick={props.onClick}>\n      {\" \"}\n      Reset{\" \"}\n    </div>\n  );\n}\n\nclass FormComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      Attack: 0,\n      AttackRoll: 0,\n      Defense: 0,\n      DefenseRoll: 0,\n      roundWinner: \"\",\n      canChange: true,\n      win: false\n    };\n\n    this.handleChangeAttack = this.handleChangeAttack.bind(this);\n    this.handleChangeDefense = this.handleChangeDefense.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChangeAttack(event) {\n    if (this.state.canChange && event.target.value >= 0) {\n      this.setState({ Attack: parseInt(event.target.value) });\n    }\n  }\n\n  handleChangeDefense(event) {\n    if (this.state.canChange && event.target.value >= 0) {\n      this.setState({ Defense: parseInt(event.target.value) });\n    }\n  }\n\n  logic() {\n    if (this.state.win) {\n      return;\n    } else if (this.state.Attack <= 1 || parseInt(this.state.Defense) === 0) {\n      this.setState({ win: true });\n      return;\n    }\n    this.setState(battle(this.state.Attack, this.state.Defense));\n  }\n\n  handleSubmit(event) {\n    this.logic();\n    this.setState({\n      canChange: false\n    });\n    event.preventDefault();\n  }\n\n  renderWin() {\n    let winner = \"\";\n    let remaining = 0;\n    if (this.state.Defense == 0) {\n      winner = \"Attack\";\n      remaining = this.state.Attack;\n    } else {\n      winner = \"Defense\";\n      remaining = this.state.Defense;\n    }\n    if (this.state.win) {\n      return <Win winner={winner} remaining={remaining} />;\n    }\n  }\n\n  handleReset() {\n    this.setState({\n      Attack: 0,\n      Defense: 0,\n      canChange: true,\n      win: false\n    });\n  }\n\n  renderInfo() {\n    if (!this.state.canChange) {\n      return (\n        <Info\n          attack={this.state.AttackRoll}\n          defense={this.state.DefenseRoll}\n          winner={this.state.roundWinner}\n        />\n      );\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className=\"form\">\n        <h1 className=\"card title\"> Risk Calc </h1>\n        <label className=\"form-element card\">\n          Attack:\n          <input\n            className=\"form-input\"\n            type=\"number\"\n            value={this.state.Attack}\n            onChange={this.handleChangeAttack}\n          />\n        </label>\n        <label className=\"form-element card\">\n          Defense:\n          <input\n            className=\"form-input\"\n            type=\"number\"\n            value={this.state.Defense}\n            onChange={this.handleChangeDefense}\n          />\n        </label>\n        <input className=\"submit card\" type=\"submit\" value=\"Submit\" />\n        {this.renderInfo()}\n        {this.renderWin()}\n        <Reset onClick={() => this.handleReset()} />\n      </form>\n    );\n  }\n}\n\nReactDOM.render(<FormComponent />, document.getElementById(\"root\"));\n\nfunction attackDice(x) {\n  if (x > 3) {\n    return 3;\n  } else if (x == 3) {\n    return 2;\n  } else if (x == 2) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\nfunction defDice(x) {\n  Math.round(Math.random() * 6);\n  if (x >= 2) {\n    return 2;\n  } else if (x > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\nfunction combat(x) {\n  let ret = 0;\n  let hold = 0;\n  for (let i = 0; i < x; i++) {\n    hold = Math.round(Math.random() * 6);\n    if (hold > ret) {\n      ret = hold;\n    }\n  }\n  return ret;\n}\nfunction attack(x) {\n  let dice = attackDice(x);\n  return combat(dice);\n}\nfunction defense(x) {\n  let dice = defDice(x);\n  console.log(dice);\n  return combat(dice);\n}\n\nfunction battle(armiesAttack, armiesDefend) {\n  let attackRoll = attack(parseInt(armiesAttack));\n  let defendRoll = defense(parseInt(armiesDefend));\n  let winner;\n  if (defendRoll >= attackRoll) {\n    armiesAttack -= 1;\n    winner = \"Defense\";\n  } else {\n    armiesDefend -= 1;\n    winner = \"Attack\";\n  }\n  return {\n    Attack: armiesAttack,\n    Defense: armiesDefend,\n    AttackRoll: attackRoll,\n    DefenseRoll: defendRoll,\n    roundWinner: winner\n  };\n}\n"],"sourceRoot":""}